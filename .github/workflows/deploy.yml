name: Deploy to Amazon EC2

on: # Workflow를 자동으로 트리거 하기 위한 이벤트
  release:
    types: [push] # push를 하면 자동으로 실행
  push:
    branches: [main] # main 브랜치에서 동작

# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: seoul-codedeploy-footprint-web
  PROD_S3_BUCKET_DIR: prod
  PROD_CODE_DEPLOY_APPLICATION_NAME: footprint-prod
  PROD_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: footprint-prod-group

permissions:
  contents: read

jobs: # 병렬로 실행되는 작업 단위, 여러 step으로 이루어짐
  # prod
  prod-deploy:
    if: contains(github.ref, 'main')
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3

    # (2) JDK 11 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # (3) 환경별 yml 파일 생성 - prod
    - name: make env yml
      run: |
        cd ./src/main/resources
        touch ./application-database.yml
        echo "${{ secrets.YML_DATABASE_PROD }}" > ./application-database.yml
        touch ./application-security.yml
        echo "${{ secrets.YML_SECURITY_PROD }}" > ./application-security.yml
      shell: bash

    # (4) ./gradlw 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash

    # (5) Gradle build (Test 제외)
    - name: Build with Gradle
      run: ./gradlew clean build -x test
      shell: bash

    # (6) Cd Project Root DIR
    - name: Cd Project Root DIR
      run: cd ../../../
      shell: bash

    # (7) Make Deploy DIR
    - name: Make Deploy DIR
      run: |
        mkdir ./prod-footprint-deploy
        chmod -R 777 ./prod-footprint-deploy
      shell: bash

    # (8) Copy Jar To Delpoy DIR
    - name: Copy jar and yml To Delpoy DIR
      run: |
        cp ./build/libs/footprint-0.0.1-SNAPSHOT.jar ./prod-footprint-deploy
        cp ./.github/scripts/prod/prodappsepc.yml ./prod-footprint-deploy/appspec.yml
        cp ./.github/scripts/prod/proddeployfootprint.sh ./prod-footprint-deploy/deployfootprint.sh
        cp ./.github/scripts/prod/prodhealth.sh ./prod-footprint-deploy/health.sh
        cp ./.github/scripts/prod/prodprofile.sh ./prod-footprint-deploy/profile.sh
        cp ./.github/scripts/prod/prodstart.sh ./prod-footprint-deploy/start.sh
        cp ./.github/scripts/prod/prodstop.sh ./prod-footprint-deploy/stop.sh
        cp ./.github/scripts/prod/prodswitch.sh ./prod-footprint-deploy/switch.sh
        chmod +x ./prod-footprint-deploy
      shell: bash

    # (9) Make zip file
    - name: Make zip file
      run: |
        cd ./prod-footprint-deploy
        ZIP_FILENAME="$(date '+%Y%m%d')_$GITHUB_SHA"
        zip -qq -r "$ZIP_FILENAME".zip .
      shell: bash

    # (10) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # (11) 빌드 결과물을 S3 버킷에 업로드
    # $GITHUB_SHA: Github 자체에서 커밋마다 생성하는 랜덤한 변수값 (파일 업로드시 이름 중복 X)
    - name: Upload to AWS S3
      run: |
        cd ./prod-footprint-deploy
        ZIP_FILENAME="$(date '+%Y%m%d')_$GITHUB_SHA"
        aws s3 cp --region ${{ env.AWS_REGION }} ./"$ZIP_FILENAME".zip s3://${{ env.S3_BUCKET_NAME }}/${{ env.PROD_S3_BUCKET_DIR }}/"$ZIP_FILENAME".zip

    # (12) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    # --application-name: CodeDeploy 애플리케이션 이름
    # --deployment-config-name: 배포 방식 (기본값 사용)
    # --deployment-group-name: CodeDeploy 배포 그룹 이름
    # --s3-location: 버킷 이름, 키 값, 번들타입
    - name: Deploy to AWS EC2 from S3
      run: |
        ZIP_FILENAME="$(date '+%Y%m%d')_$GITHUB_SHA"
        aws deploy create-deployment --application-name $PROD_CODE_DEPLOY_APPLICATION_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $PROD_CODE_DEPLOY_DEPLOYMENT_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=prod/"$ZIP_FILENAME".zip
